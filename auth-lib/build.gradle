/*
 * Copyright (c) 2015-2016 Spotify AB
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'com.android.library'

project.group = 'com.spotify.android'
project.archivesBaseName = 'auth'
project.version = '2.0.0'

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        buildConfigField 'String', 'LIB_VERSION_NAME', "\"$project.version\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    lintOptions {
        lintConfig file("${project.rootDir}/config/lint.xml")
        quiet false
        warningsAsErrors false
        textReport true
        textOutput 'stdout'
        xmlReport false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    def manifestPlaceholdersForTests = [redirectSchemeName: "spotify-sdk", redirectHostName: "auth"]
    unitTestVariants.all {
        it.mergedFlavor.manifestPlaceholders += manifestPlaceholdersForTests
    }
}

dependencies {
    implementation 'androidx.browser:browser:1.4.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.21.0'
    testImplementation 'org.robolectric:robolectric:4.7.3'
}

/*
    Static analysis section
    run: ./gradlew auth-lib:checkstyle auth-lib:findbugs
 */

apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
    dependsOn 'generateReleaseRFile'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += files("build/generated/source/r/debug")
    options.links("http://docs.oracle.com/javase/7/docs/api/")
    destinationDir = file("../docs/")
    failOnError false
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
    sign publishing.publications
}

project.ext["ossrhUsername"] = ''
project.ext["ossrhPassword"] = ''

def getSigningVariables() {
    // Try to fetch the values from local.properties, otherwise look in the environment variables
    // More info here: https://central.sonatype.org/publish/requirements/gpg/
    File secretPropsFile = project.rootProject.file('local.properties')
    if (secretPropsFile.exists()) {
        Properties p = new Properties()
        new FileInputStream(secretPropsFile).withCloseable { is ->
            p.load(is)
        }
        p.each { name, value ->
            project.ext[name] = value
        }
    } else {
        project.ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
        project.ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    }
}

/*
    Deployment to OSSRH repository
    1. run: ./gradlew :auth-lib:assembleRelease and then ./gradlew :auth-lib:publishReleasePublicationToMavenRepository
    2. login to https://s01.oss.sonatype.org/ (you need to have access to auth lib OSSRH repository)
    3. if everything looks correctly, close and then debug the staging repository.
    More info here: https://central.sonatype.org/publish/release/
 */
afterEvaluate {
    publishing {
        repositories {
            maven {
                getSigningVariables()

                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = isReleaseVersion ? releaseRepo : snapshotRepo
                credentials {
                    username = project.ext["ossrhUsername"]
                    password = project.ext["ossrhPassword"]
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.release
                artifact javadocJar
                artifact sourcesJar

                groupId = project.group
                artifactId = project.archivesBaseName
                version = project.version

                pom {
                    name = project.group + ':' + project.archivesBaseName
                    packaging = 'aar'
                    description = 'Spotify authorization library for Android'
                    url = 'https://github.com/spotify/android-auth'

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    scm {
                        connection = 'scm:git:https://github.com/spotify/android-auth.git'
                        developerConnection = 'scm:git:git@github.com:spotify/android-auth.git'
                        url = 'https://github.com/spotify/android-auth'
                    }

                    developers {
                        developer {
                            id = 'erikg'
                            name = 'Erik Ghonyan'
                            email = 'erikg@spotify.com'
                        }
                    }
                }
            }
        }
    }
}
